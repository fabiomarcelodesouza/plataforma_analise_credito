//Conectar na instancia via power shell
ssh -i .\primevirtu-glowz.pem ec2-user@54.209.191.70

sudo yum update

//Instalar python3
sudo yum install python3

// Create directory
mkdir chatbot-glowz
cd chatbot-glowz

// Create the virtual environment
python3 -m venv venv

// Activate the virtual environment
source venv/bin/activate

export TMPDIR='/var/tmp'

pip install --no-cache-dir -r requirements.txt

//Instalar gunicorn	
pip install gunicorn

//Testar gunicorn
gunicorn -b 0.0.0.0:5003 app:app

//Adicionar o grupo www-data
sudo groupadd www-data

//Adicionar o usuario ec2-user ao www-data
sudo usermod -aG www-data ec2-user

//We create a <projectname>.service file in the /etc/systemd/system folder, and specify what would happen to gunicorn when the system reboots.
sudo nano /etc/systemd/system/pg-classificacao.service

//We will be adding 3 parts to systemd Unit file — Unit, Service, Install

//Unit — This section is for description about the project and some dependencies
//Service — To specify user/group we want to run this service after. Also some information about the executables and the commands.
//Install — tells systemd at which moment during boot process this service should start.

[Unit]
Description=Plataforma Cognitiva - API Classificacao
After=network.target

[Service]
User=ec2-user
Group=www-data
WorkingDirectory=/home/ec2-user/plataforma_analise_credito/classificacao/app
ExecStart=/home/ec2-user/plataforma_analise_credito/classificacao/app/venv/bin/gunicorn -b localhost:5003 app:app
Restart=always

[Install]
WantedBy=multi-user.target


//Ativar o serviço
sudo systemctl daemon-reload
sudo systemctl enable pg-classificacao
sudo systemctl start pg-classificacao
sudo systemctl status pg-classificacao

//Reestartar o serviço
sudo systemctl daemon-reload
sudo systemctl restart pg-model-manager
sudo journalctl -u pg-model-manager -f

/Verificar os logs do serviço
sudo journalctl -xe -u pg-model-manager

//Instalar nginx
sudo yum install nginx

//Start the Nginx service and go to the Public IP address of your EC2 on the browser to see the default nginx landing page
sudo systemctl start nginx
sudo systemctl enable nginx

//To install the reverse proxy, create /etc/nginx/conf.d/regressao_linear.conf (this is loaded because /etc/nginx/nginx.conf contains this line: include /etc/nginx/conf.d/*.conf;):
server {
    listen 5101;
    server_name _;
    access_log  /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    location / {
        proxy_pass         http://127.0.0.1:5001/;
        proxy_redirect     off;

        proxy_set_header   Host                 $host;
        proxy_set_header   X-Real-IP            $remote_addr;
        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto    $scheme;
    }
}




##############################INSTALL FFMPEG
Step 1: SSH into your instance and become root

sudo su -
Step 2: Go to the /usr/local/bin directory

cd /usr/local/bin
Step 3: Inside the /usr/local/bin directory, create an ffmpeg directory and go inside it.

mkdir ffmpeg && cd ffmpeg
Step 4: Download a static build of ffmpeg

Go to the following link and download a static build relevant for your system.

FFmpeg Static Builds

Note: To find the current build version from John’s site. Click on the “build info” link at the releases page and at the top of the .txt file, you will see the current version of the build. Replace the ffmpeg-[X.X.X]-amd64-static with the current build version.

To check if your system is 32-bit or 64-bit you can execute the following command:

uname -a
It will output something like:

Linux ip-172-31-1-100 4.9.62-21.56.amzn1.x86_64 #1 SMP Thu Nov 16 05:37:08 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
Note: That last i386 indicates that it’s 32-bit; x86_64 indicates 64-bit.

Also, by hit and trial, I found out that the processor is AMD and not ARM. Inside the /usr/local/bin/ffmpeg folder run this command to download the static binaries.

wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-6.1-amd64-static.tar.xz

Step 5: Unzip the binaries

Use the following command to unzip the binaries.

tar -xf ffmpeg-6.1-amd64-static.tar.xz
This will create a folder named ffmpeg-4.2.1-amd64-static . Go inside this folder to check if ffmpeg has been installed successfully or not.

./ffmpeg -version
It should output something like:

ffmpeg version 4.2.1-static https://johnvansickle.com/ffmpeg/  

.
.
.
.
Hyper fast Audio and Video encoder
Now we will move to the outer folder.

yes | cp -a /usr/local/bin/ffmpeg/ffmpeg-6.1-amd64-static/* /usr/local/bin/ffmpeg/

Step 6: Create a symlink to use ffmpeg from any location

Next, go ahead and create a symlink so that ffmpeg can be run from any location.

ln -s /usr/local/bin/ffmpeg/ffmpeg-6.1-amd64-static /usr/bin/ffmpeg
Note: The first part /usr/local/bin/ffmpeg/ffmpeg is where the file is located after I untarred the file. The second part /usr/bin/ffmpeg is where we want the symlink to go

That’s it. You are done with the installation.

I found this solution on AWS forums and have shared it here so that it is easier to find. Here’s a link to the forum post.

https://forums.aws.amazon.com/thread.jspa?messageID=332091

If you are trying to install FFmpeg on a Raspberry Pi then check out this post for step by step instructions:

How to install FFMPEG and FFServer on Raspberry Pi

You can buy me a coffee if this post really helped you learn something or fix a nagging issue!